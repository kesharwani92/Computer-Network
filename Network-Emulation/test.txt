CSEE 4199 Programming Assignment 2
Yan-Song Chen, yc3240

================================================================================
Part 1 - Go-Back-N Protocol
================================================================================
*******************************Test Case 2-1************************************
This cases show the correctness of deterministic mode. We can see that the 
timeout handling mechanism is correct.

Sender$ ./gbnnode 1111 2222 5 -d 7
> send abcdefghi
[1530658274.35] packet0 a sent
[1530658274.55] packet1 b sent
[1530658274.73] packet2 c sent
[1530658274.80] packet3 d sent
[1530658274.85] packet4 e sent
[1530658274.101] ACK0 received, window moved to 1
[1530658274.111] ACK1 received, window moved to 2
[1530658274.116] packet5 f sent
[1530658274.122] ACK2 received, window moved to 3
[1530658274.126] packet6 g sent
[1530658274.132] ACK3 received, window moved to 4
[1530658274.137] packet7 h sent
[1530658274.143] ACK4 received, window moved to 5
[1530658274.147] packet8 i sent
[1530658274.153] ACK5 received, window moved to 6
[1530658274.167] ACK5 discarded
[1530658274.177] ACK5 received, window moved to 6
[1530658274.2] timeout
[1530658274.39] packet6 g sent
[1530658274.67] packet7 h sent
[1530658274.88] packet8 i sent
[1530658274.110] ACK6 received, window moved to 7
[1530658274.116] ACK7 received, window moved to 8
[1530658274.119] ACK8 received, window moved to 9
[Summary] 1/11packets dropped, loss rate = 0.0909091

Receiver$ ./gbnnode 2222 1111 5 -d 7
> [1530658274.53] packet 0 a received
[1530658274.95] ACK0 sent, expecting 1
[1530658274.101] packet 1 b received
[1530658274.109] ACK1 sent, expecting 2
[1530658274.113] packet 2 c received
[1530658274.120] ACK2 sent, expecting 3
[1530658274.123] packet 3 d received
[1530658274.130] ACK3 sent, expecting 4
[1530658274.134] packet 4 e received
[1530658274.141] ACK4 sent, expecting 5
[1530658274.144] packet 5 f received
[1530658274.151] ACK5 sent, expecting 6
[1530658274.155] packet6 g discarded
[1530658274.158] packet 7 h received
[1530658274.165] ACK5 sent, expecting 6
[1530658274.169] packet 8 i received
[1530658274.175] ACK5 sent, expecting 6
[1530658274.48] packet 6 g received
[1530658274.69] ACK6 sent, expecting 7
[1530658274.75] packet 7 h received
[1530658274.84] ACK7 sent, expecting 8
[1530658274.91] packet 8 i received
[1530658274.98] ACK8 sent, expecting 9
[Summary] 1/12packets dropped, loss rate = 0.0833333

*******************************Test Case 2-1************************************
This case shows that the behavior and intermediate messages are correct.
Terminal1$ ./gbnnode 9999 3333 3 -d 4
> send abcdefgh
send abcdefgh 
[1530653392.143] packet0 a sent
[1530653392.212[] 1530653392.packet2131 b sent] 
[1530653392.225] packet2 c sent
ACK0 received, window moved to 1
[1530653392.951] ACK1 received, window moved to 2
[1530653392.956] ACK2 received, window moved to 3
[1530653392.975] packet3 d sent
[1530653392.985] packet4 e sent
[1530653392.11] ACK2 discarded
[1530653392.110] timeout
[1530653392.144] packet3 d sent
[1530653392.167] packet4 e sent
[1530653392.175] ACK3 received, window moved to 4
[1530653392.183] ACK4 received, window moved to 5
[1530653392.200] packet5 f sent
[1530653392.209] packet6 g sent
[1530653392.234] ACK4 received, window moved to 5
[1530653392.183] timeout
[1530653392.224] packet5 f sent
[1530653392.236] packet6 g sent
[1530653392.261] ACK5 discarded
[1530653392.271] ACK6 received, window moved to 7
[1530653392.297] packet7 h sent
[1530653392.285] timeout
[1530653392.319] packet7 h sent
[1530653392.360] ACK7 received, window moved to 8
[Summary] 2/10packets dropped, loss rate = 0.2

Terminal2$ ./gbnnode 3333 9999 3 -d 4
[1530653392.154] packet 0 a received
[1530653392.199] ACK0 sent, expecting 1
[1530653392.218] packet 1 b received
[1530653392.237] ACK1 sent, expecting 2
[1530653392.242] packet 2 c received
[1530653392.247] ACK2 sent, expecting 3
[1530653392.968] packet3 d discarded
[1530653392.988] packet 4 e received
[1530653392.1] ACK2 sent, expecting 3
[1530653392.152] packet 3 d received
[1530653392.169] ACK3 sent, expecting 4
[1530653392.174] packet 4 e received
[1530653392.181] ACK4 sent, expecting 5
[1530653392.192] packet5 f discarded
[1530653392.212] packet 6 g received
[1530653392.225] ACK4 sent, expecting 5
[1530653392.234] packet 5 f received
[1530653392.256] ACK5 sent, expecting 6
[1530653392.260] packet 6 g received
[1530653392.269] ACK6 sent, expecting 7
[1530653392.288] packet7 h discarded
[1530653392.328] packet 7 h received
[1530653392.347] ACK7 sent, expecting 8
[Summary] 3/13packets dropped, loss rate = 0.230769

*******************************Test Case 2-2************************************
This case shows that the loss rates converge to the -p arguments. The
intermediate messages are ignored for clarity.

Firstly send a string from terminal 1, the sender's probability is 0.192308 and
the receiver's probability is 0.297297.

Secondly send another long string from terminal 2, the sender's probility is
0.321839, and the receivers probability is 0.20202.

Terminal1$ ./gbnnode 9999 3333 5 -p 0.2
> send abcdefghijklmnopqr
[Summary] 5/26packets dropped, loss rate = 0.192308
...
[Summary] 40/198packets dropped, loss rate = 0.20202

Terminal2$ ./gbnnode 3333 9999 5 -p 0.3
...
[Summary] 11/37packets dropped, loss rate = 0.297297
> send xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
[Summary] 56/174packets dropped, loss rate = 0.321839
================================================================================
Part 2 - Distance Vector Algorithm
================================================================================

*******************************Test Case 2-1************************************
I ran the basic test case in PA2-Figure 3, page 7.

$ ./dvnode 1111 2222 .1 3333 .5
$ ./dvnode 2222 1111 .1 3333 .2 4444 .8
$ ./dvnode 3333 1111 .5 2222 .2 4444 .5
$ ./dvnode 4444 2222 .8 3333 .5 last

The result works as expected:

[1530651261.296] Node 1111 Routing Table
 - (0.8) -> Node 4444; Next hop -> Node 2222
 - (0.3) -> Node 3333; Next hop -> Node 2222
 - (0.1) -> Node 2222

[1530651261.760] Node 2222 Routing Table
 - (0.7) -> Node 4444; Next hop -> Node 3333
 - (0.2) -> Node 3333
 - (0.1) -> Node 1111

[1530651261.647] Node 3333 Routing Table
 - (0.5) -> Node 4444
 - (0.2) -> Node 2222
 - (0.3) -> Node 1111; Next hop -> Node 2222

[1530651261.5] Node 4444 Routing Table
 - (0.8) -> Node 1111; Next hop -> Node 3333
 - (0.5) -> Node 3333
 - (0.7) -> Node 2222; Next hop -> Node 3333

*******************************Test Case 2-2************************************

   .-------------0.8-------------.
.----.         .----.         .----.         .----.
|2001|---0.5---|2002|---0.2---|2003|---0.4---|2004|
`----`         `----`         `----`         `----`
                  `--------------0.7------------`

$ ./dvnode 2001 2002 0.5 2003 0.8
$ ./dvnode 2002 2001 0.5 2003 0.2 2004 0.7
$ ./dvnode 2003 2001 0.8 2002 0.2 2004 0.4
$ ./dvnode 2004 2002 0.7 2003 0.4 last

The result works as expected:

[1530650883.423] Node 2001 Routing Table
 - (1.1) -> Node 2004; Next hop -> Node 2002
 - (0.7) -> Node 2003; Next hop -> Node 2002
 - (0.5) -> Node 2002

[1530650883.840] Node 2002 Routing Table
 - (0.6) -> Node 2004; Next hop -> Node 2003
 - (0.2) -> Node 2003
 - (0.5) -> Node 2001

[1530650883.692] Node 2003 Routing Table
 - (0.4) -> Node 2004
 - (0.2) -> Node 2002
 - (0.7) -> Node 2001; Next hop -> Node 2002

[1530650883.24] Node 2004 Routing Table
 - (1.1) -> Node 2001; Next hop -> Node 2003
 - (0.4) -> Node 2003
 - (0.6) -> Node 2002; Next hop -> Node 2003

================================================================================
Part 3 - Combination
================================================================================
3-1. I ran the example shown in figure 4, and the loss rate converged.

$ ./cnnode 1111 receive send  2222 3333
...
[1530806912.741] Link to 3333: 1856 packets sent, 922 lost, loss rate = 0.5
[1530806912.771] Link to 2222: 1856 packets sent, 175 lost, loss rate = 0.09
[1530806914.503] Node 1111 Routing Table
 - (0) -> Node 4444; Next hop -> Node 3333
 - (0.09) -> Node 2222
 - (0.3) -> Node 3333; Next hop -> Node 2222

$ ./cnnode 2222 receive 1111 .1 send 3333 4444
...
[1530806912.725] Link to 4444: 1853 packets sent, 1510 lost, loss rate = 0.81
[1530806912.70] Link to 3333: 1854 packets sent, 382 lost, loss rate = 0.21
[1530806912.98] Link to 1111: 1856 packets sent, 174 lost, loss rate = 0.09
[1530806914.502] Node 2222 Routing Table
 - (0.09) -> Node 1111
 - (0.21) -> Node 3333
 - (0.09) -> Node 4444; Next hop -> Node 1111

$ ./cnnode 3333 receive 1111 .5 2222 .2 send 4444
...
[1530806912.719] Link to 4444: 1859 packets sent, 898 lost, loss rate = 0.48
[1530806912.770] Link to 2222: 1852 packets sent, 379 lost, loss rate = 0.2
[1530806912.781] Link to 1111: 1855 packets sent, 921 lost, loss rate = 0.5
[1530806914.503] Node 3333 Routing Table
 - (0.29) -> Node 1111; Next hop -> Node 2222
 - (0.2) -> Node 2222
 - (0.29) -> Node 4444; Next hop -> Node 2222

$ ./cnnode 4444 receive 2222 .8 3333 .5 send last
[1530806913.407] Link to 3333: 1956 packets sent, 946 lost, loss rate = 0.48
[1530806913.511] Link to 2222: 1951 packets sent, 1582 lost, loss rate = 0.81
[1530806914.552] Node 4444 Routing Table
 - (0) -> Node 1111; Next hop -> Node 3333
 - (0.66) -> Node 2222; Next hop -> Node 3333
 - (0.48) -> Node 3333

3-2. Same topology as 2-2. The loss rate and routing table converged.
$ ./cnnode 2001 receive send 2002 2003
...
[1530808219.522] Link to 2003: 2846 packets sent, 2262 lost, loss rate = 0.79
[1530808219.560] Link to 2002: 2846 packets sent, 1400 lost, loss rate = 0.49
[1530808221.550] Node 2001 Routing Table
 - (1.06) -> Node 2004; Next hop -> Node 2002
 - (0.49) -> Node 2002
 - (0.69) -> Node 2003; Next hop -> Node 2002

$ ./cnnode 2002 receive 2001 0.5 2004 0.7 send 2003
...
[1530808219.348] Link to 2003: 2844 packets sent, 576 lost, loss rate = 0.2
[1530808219.404] Link to 2004: 2828 packets sent, 1984 lost, loss rate = 0.7
[1530808219.419] Link to 2001: 2844 packets sent, 1399 lost, loss rate = 0.49
[1530808221.550] Node 2002 Routing Table
 - (0.49) -> Node 2001
 - (0.6) -> Node 2004; Next hop -> Node 2003
 - (0.2) -> Node 2003

$ ./cnnode 2003 receive 2001 0.8 2002 0.2 2004 0.4 send
...
[1530808220.86] Link to 2004: 2924 packets sent, 1169 lost, loss rate = 0.4
[1530808220.124] Link to 2002: 2939 packets sent, 596 lost, loss rate = 0.2
[1530808220.137] Link to 2001: 2941 packets sent, 2345 lost, loss rate = 0.8
[1530808221.550] Node 2003 Routing Table
 - (0.66) -> Node 2001; Next hop -> Node 2002
 - (0.2) -> Node 2002
 - (0.4) -> Node 2004

$ ./cnnode 2004 receive send 2002 2003 last
[1530808226.971] Link to 2003: 3421 packets sent, 1384 lost, loss rate = 0.4
[1530808226.50] Link to 2002: 3421 packets sent, 2431 lost, loss rate = 0.71
[1530808227.541] Node 2004 Routing Table
 - (1.05) -> Node 2001; Next hop -> Node 2003
 - (0.6) -> Node 2002; Next hop -> Node 2003
 - (0.4) -> Node 2003